<nume aplicatie>

1. Scopul aplicației
Descrierea sumară a aplicației (max. ½ de pagină)

2. Aria de acoperire a aplicației
Ce este și ce nu este aplicația (max. ½ de pagină). 
De exemplu poate un utilizator se așteaptă ca aplicație
noastră sa ofere serviciu de plăți însă noi nu dorim să
dezvoltăm acest feature.

3. Grupurile de interese/ domeniul de business 
Care este publicul țintă al aplicației? În ce domeniu se
încadrează aplicația?

4. Studiu de piață
Colectarea cerințelor prin metode directe(interviuri,
chestionare adresate posibililor utilizatori ai aplicației)
și metode indirecte(studierea aplicațiilor similare). 

5. Perspectiva de dezvoltare
Perspectiva de dezvoltare descrie modul în care urmează 
să ajungem la aplicație. Această perspectivă trebuie să conțină:
    a. Descompunerea pe componente de dezvoltare, folosind user stories
    b. Fiecare user story va fi scris folosind acceptance criteria de 
       tipul GIVEN-WHEN-THEN. 
       (https://rubygarage.org/blog/clear-acceptance-criteria-and-why-its-important)
    c. Estimarea efortului de dezvoltare a componentele conform metodologiei Agile
    d. Alocarea componentelor membrilor echipei de Dezvoltare
    e. Împărțirea perioadei de dezvoltare în iterații de 1-2 săptămâni și stabilirea
       obiectivelor concrete pentru fiecare
    f. Planificarea componentelor de dezvoltare pe iterații, astfel încât fiecare
       iterație să aibă obiective concrete, care să fie demonstrabile în aplicație
       la sfârșitul iterației.
    g. Construirea unui backlog cu toate aceste tichete într-un tool specializat(Jira, Trello, etc).
    h. Construirea unui repository de Github public.
    
6. Arhitectura aplicației
Identificarea a minim 3 caracteristici arhitecturale specifice
produsului construit(performață, relevanță, securitate, uzabilitate,
testabilitate, scalabilitate,etc.). Prezentarea stilului arhitectural
ales(Arhitectura pe layere – MVC, Arhitectura de tip microservicii, Monolit etc).
Diagramă UML care sa surprindă arhtiectura aleasă.
    
7. Plan de testare
Orice produs necesită o testare amanunțită deoarcere un produs
instabil duce la pierderea utilizatorilor. Există mai multe tipuri
de testae(Testare manuala, Testare automata. Testare unitară,
Teste de integrare, Teste de performanță). Se va detalia fiecare
mod de testare ales(tool-ul/framework-ul cu care se va efectua,
o estimare a gradului de acoperire al codului cu teste etc.)
   
8. Tehnologii utilizate
Lista tehnologiilor alese pentru dezvoltarea aplicație.
